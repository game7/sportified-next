generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 Int       @id @default(autoincrement())
  compoundId         String    @unique @map(name: "compound_id")
  userId             Int       @map(name: "user_id")
  providerType       String    @map(name: "provider_type")
  providerId         String    @map(name: "provider_id")
  providerAccountId  String    @map(name: "provider_account_id")
  refreshToken       String?   @map(name: "refresh_token")
  accessToken        String?   @map(name: "access_token")
  accessTokenExpires DateTime? @map(name: "access_token_expires")
  createdAt          DateTime  @default(now()) @map(name: "created_at")
  updatedAt          DateTime  @default(now()) @map(name: "updated_at")

  @@index([providerAccountId], name: "providerAccountId")
  @@index([providerId], name: "providerId")
  @@index([userId], name: "userId")
  @@map(name: "accounts")
}

model Session {
  id           Int      @id @default(autoincrement())
  userId       Int      @map(name: "user_id")
  expires      DateTime
  sessionToken String   @unique @map(name: "session_token")
  accessToken  String   @unique @map(name: "access_token")
  createdAt    DateTime @default(now()) @map(name: "created_at")
  updatedAt    DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "sessions")
}

model User {
  id            Int       @id @default(autoincrement())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map(name: "email_verified")
  image         String?
  createdAt     DateTime  @default(now()) @map(name: "created_at")
  updatedAt     DateTime  @default(now()) @map(name: "updated_at")

  @@map(name: "users")
}

model VerificationRequest {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now()) @map(name: "created_at")
  updatedAt  DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "verification_requests")
}

model Tenant {
  id        Int      @id @default(autoincrement())
  name      String?  @db.VarChar
  slug      String?  @db.VarChar
  host      String?  @db.VarChar
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  pages Page[]
  @@map(name: "tenants")
}

model Page {
  id        Int           @id @default(autoincrement())
  tenantId  Int           @map(name: "tenant_id")
  tenant    Tenant        @relation(fields: [tenantId], references: [id])
  title     String        @db.VarChar
  slug      String?       @db.VarChar
  draft     Boolean?
  position  Int?
  createdAt DateTime      @default(now()) @map(name: "created_at")
  updatedAt DateTime      @default(now()) @map(name: "updated_at")
  blocks    Json          @default("[]")
  elements  PageElement[]

  @@index([tenantId], name: "index_pages_on_tenant_id")
  @@map(name: "pages")
}

model PageElement {
  id        Int      @id @default(autoincrement())
  type      String   @db.VarChar
  pageId    Int      @map(name: "page_id")
  page      Page     @relation(fields: [pageId], references: [id])
  position  Int?
  section   String?
  options   Json?
  createdAt DateTime @default(now()) @map(name: "created_at")
  updatedAt DateTime @default(now()) @map(name: "updated_at")

  @@map(name: "page_elements")
}
